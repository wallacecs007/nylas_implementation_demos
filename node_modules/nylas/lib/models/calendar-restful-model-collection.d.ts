import Calendar from './calendar';
import NylasConnection from '../nylas-connection';
import RestfulModelCollection from './restful-model-collection';
export default class CalendarRestfulModelCollection extends RestfulModelCollection<Calendar> {
    connection: NylasConnection;
    modelClass: typeof Calendar;
    constructor(connection: NylasConnection);
    freeBusy(options: {
        start_time?: string;
        startTime?: string;
        end_time?: string;
        endTime?: string;
        emails: string[];
    }, callback?: (error: Error | null, data?: {
        [key: string]: any;
    }) => void): Promise<any>;
    availability(options: {
        emails: string[];
        duration: number;
        interval: number;
        start_time?: string;
        startTime?: string;
        end_time?: string;
        endTime?: string;
        free_busy?: Array<{
            emails: string;
            object: string;
            time_slots: Array<{
                object: string;
                status: string;
                start_time: string;
                end_time: string;
            }>;
        }>;
        open_hours: Array<{
            emails: string[];
            days: string[];
            timezone: string;
            start: string;
            end: string;
            object_type: string;
        }>;
    }, callback?: (error: Error | null, data?: {
        [key: string]: any;
    }) => void): Promise<any>;
    consecutiveAvailability(options: {
        emails: Array<string[]>;
        duration: number;
        interval: number;
        start_time?: number;
        startTime?: number;
        end_time?: number;
        endTime?: number;
        buffer?: number;
        free_busy?: Array<{
            email: string;
            object: string;
            time_slots: Array<{
                object: string;
                status: string;
                start_time: number;
                end_time: number;
            }>;
        }>;
        open_hours: Array<{
            emails: string[];
            days: number[];
            timezone: string;
            start: string;
            end: string;
            object_type: string;
        }>;
    }, callback?: (error: Error | null, data?: {
        [key: string]: any;
    }) => void): Promise<any>;
}
