import NylasConnection from '../nylas-connection';
import RestfulModel from './restful-model';
export declare type GetCallback = (error: Error | null, result?: RestfulModel) => void;
export default class RestfulModelCollection<T extends RestfulModel> {
    connection: NylasConnection;
    modelClass: typeof RestfulModel;
    baseUrl?: string;
    constructor(modelClass: typeof RestfulModel, connection: NylasConnection);
    forEach(params: {
        [key: string]: any;
    } | undefined, eachCallback: (item: T) => void, completeCallback?: (err?: Error | null | undefined) => void): Promise<never> | undefined;
    count(params?: {
        [key: string]: any;
    }, callback?: (err: Error | null, num?: number) => void): Promise<any>;
    first(params?: {
        [key: string]: any;
    }, callback?: (error: Error | null, model?: T) => void): Promise<T>;
    list(params?: {
        [key: string]: any;
    }, callback?: (error: Error | null, obj?: T[]) => void): Promise<void | T[]>;
    find(id: string, paramsArg?: {
        [key: string]: any;
    } | GetCallback | null, callbackArg?: GetCallback | {
        [key: string]: any;
    } | null): Promise<T>;
    search(query: string, params?: {
        [key: string]: any;
    }, callback?: (error: Error | null) => void): Promise<void | T[]>;
    delete(itemOrId: T | string, params?: {
        [key: string]: any;
    }, callback?: (error: Error | null) => void): Promise<any>;
    deleteItem(options: {
        [key: string]: any;
    }, callbackArg?: (error: Error | null) => void): Promise<any>;
    build(args: {
        [key: string]: any;
    }): T;
    path(): string;
    _range({ params, offset, limit, callback, path, }: {
        params?: {
            [key: string]: any;
        };
        offset?: number;
        limit?: number;
        callback?: (error: Error | null, results?: T[]) => void;
        path?: string;
    }): Promise<void | T[]>;
    _getItems(params: {
        [key: string]: any;
    }, offset: number, limit: number, path?: string): Promise<T[]>;
    _createModel(json: {
        [key: string]: any;
    }): T;
    _getModel(id: string, params?: {
        [key: string]: any;
    }): Promise<T>;
    _getModelCollection(params: {
        [key: string]: any;
    }, offset: number, limit: number, path: string): Promise<T[]>;
}
