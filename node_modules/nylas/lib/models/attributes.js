"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Attribute = void 0;
// The Attribute class represents a single model attribute, like 'namespace_id'
// Subclasses of Attribute like AttributeDateTime know how to covert between
// the JSON representation of that type and the javascript representation.
// The Attribute class also exposes convenience methods for generating Matchers.
var Attribute = /** @class */ (function () {
    function Attribute(_a) {
        var modelKey = _a.modelKey, jsonKey = _a.jsonKey, readOnly = _a.readOnly;
        this.modelKey = modelKey;
        this.jsonKey = jsonKey || modelKey;
        this.readOnly = readOnly || false;
    }
    Attribute.prototype.toJSON = function (val) {
        return val;
    };
    Attribute.prototype.fromJSON = function (val, _parent) {
        return val || null;
    };
    Attribute.prototype.saveRequestBody = function (val) {
        if (this.readOnly) {
            return;
        }
        return this.toJSON(val);
    };
    return Attribute;
}());
exports.Attribute = Attribute;
var AttributeObject = /** @class */ (function (_super) {
    __extends(AttributeObject, _super);
    function AttributeObject(_a) {
        var modelKey = _a.modelKey, jsonKey = _a.jsonKey, itemClass = _a.itemClass, readOnly = _a.readOnly;
        var _this = _super.call(this, { modelKey: modelKey, jsonKey: jsonKey, readOnly: readOnly }) || this;
        _this.itemClass = itemClass;
        return _this;
    }
    AttributeObject.prototype.toJSON = function (val, saveRequestBody) {
        if (!val) {
            return val;
        }
        if (saveRequestBody === true && val.saveRequestBody != null) {
            return val.saveRequestBody();
        }
        else if (val.toJSON != null) {
            return val.toJSON();
        }
        return val;
    };
    AttributeObject.prototype.fromJSON = function (val, _parent) {
        if (!val || !this.itemClass) {
            return val;
        }
        return new this.itemClass(_parent.connection, val);
    };
    AttributeObject.prototype.saveRequestBody = function (val) {
        if (this.readOnly) {
            return;
        }
        return this.toJSON(val, true);
    };
    return AttributeObject;
}(Attribute));
var AttributeNumber = /** @class */ (function (_super) {
    __extends(AttributeNumber, _super);
    function AttributeNumber() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AttributeNumber.prototype.toJSON = function (val) {
        return val;
    };
    AttributeNumber.prototype.fromJSON = function (val, _parent) {
        if (!isNaN(val)) {
            return Number(val);
        }
        else {
            return null;
        }
    };
    return AttributeNumber;
}(Attribute));
var AttributeBoolean = /** @class */ (function (_super) {
    __extends(AttributeBoolean, _super);
    function AttributeBoolean() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AttributeBoolean.prototype.toJSON = function (val) {
        return val;
    };
    AttributeBoolean.prototype.fromJSON = function (val, _parent) {
        return val === 'true' || val === true || false;
    };
    return AttributeBoolean;
}(Attribute));
var AttributeString = /** @class */ (function (_super) {
    __extends(AttributeString, _super);
    function AttributeString() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AttributeString.prototype.toJSON = function (val) {
        return val;
    };
    AttributeString.prototype.fromJSON = function (val, _parent) {
        return val || '';
    };
    return AttributeString;
}(Attribute));
var AttributeStringList = /** @class */ (function (_super) {
    __extends(AttributeStringList, _super);
    function AttributeStringList() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AttributeStringList.prototype.toJSON = function (val) {
        return val;
    };
    AttributeStringList.prototype.fromJSON = function (val, _parent) {
        return val || [];
    };
    return AttributeStringList;
}(Attribute));
var AttributeDate = /** @class */ (function (_super) {
    __extends(AttributeDate, _super);
    function AttributeDate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AttributeDate.prototype.toJSON = function (val) {
        if (!val) {
            return val;
        }
        if (!(val instanceof Date)) {
            throw new Error("Attempting to toJSON AttributeDate which is not a date:\n          " + this.modelKey + "\n         = " + val);
        }
        return val.toISOString();
    };
    AttributeDate.prototype.fromJSON = function (val, _parent) {
        if (!val) {
            return null;
        }
        return new Date(val);
    };
    return AttributeDate;
}(Attribute));
var AttributeDateTime = /** @class */ (function (_super) {
    __extends(AttributeDateTime, _super);
    function AttributeDateTime() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AttributeDateTime.prototype.toJSON = function (val) {
        if (!val) {
            return null;
        }
        if (!(val instanceof Date)) {
            throw new Error("Attempting to toJSON AttributeDateTime which is not a date:\n          " + this.modelKey + "\n        = " + val);
        }
        return val.getTime() / 1000.0;
    };
    AttributeDateTime.prototype.fromJSON = function (val, _parent) {
        if (!val) {
            return null;
        }
        return new Date(val * 1000);
    };
    return AttributeDateTime;
}(Attribute));
var AttributeCollection = /** @class */ (function (_super) {
    __extends(AttributeCollection, _super);
    function AttributeCollection(_a) {
        var modelKey = _a.modelKey, jsonKey = _a.jsonKey, itemClass = _a.itemClass, readOnly = _a.readOnly;
        var _this = _super.call(this, { modelKey: modelKey, jsonKey: jsonKey, readOnly: readOnly }) || this;
        _this.itemClass = itemClass;
        return _this;
    }
    AttributeCollection.prototype.toJSON = function (vals, saveRequestBody) {
        if (!vals) {
            return [];
        }
        var json = [];
        for (var _i = 0, vals_1 = vals; _i < vals_1.length; _i++) {
            var val = vals_1[_i];
            if (saveRequestBody === true && val.saveRequestBody != null) {
                json.push(val.saveRequestBody());
            }
            else if (val.toJSON != null) {
                json.push(val.toJSON());
            }
            else {
                json.push(val);
            }
        }
        return json;
    };
    AttributeCollection.prototype.fromJSON = function (json, _parent) {
        if (!json || !(json instanceof Array)) {
            return [];
        }
        var objs = [];
        for (var _i = 0, json_1 = json; _i < json_1.length; _i++) {
            var objJSON = json_1[_i];
            var obj = new this.itemClass(_parent.connection, objJSON);
            objs.push(obj);
        }
        return objs;
    };
    AttributeCollection.prototype.saveRequestBody = function (val) {
        if (this.readOnly) {
            return;
        }
        return this.toJSON(val, true);
    };
    return AttributeCollection;
}(Attribute));
var Attributes = {
    Number: function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return new (AttributeNumber.bind.apply(AttributeNumber, __spreadArrays([void 0], args)))();
    },
    String: function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return new (AttributeString.bind.apply(AttributeString, __spreadArrays([void 0], args)))();
    },
    StringList: function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return new (AttributeStringList.bind.apply(AttributeStringList, __spreadArrays([void 0], args)))();
    },
    DateTime: function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return new (AttributeDateTime.bind.apply(AttributeDateTime, __spreadArrays([void 0], args)))();
    },
    Date: function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return new (AttributeDate.bind.apply(AttributeDate, __spreadArrays([void 0], args)))();
    },
    Collection: function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return new (AttributeCollection.bind.apply(AttributeCollection, __spreadArrays([void 0], args)))();
    },
    Boolean: function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return new (AttributeBoolean.bind.apply(AttributeBoolean, __spreadArrays([void 0], args)))();
    },
    Object: function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return new (AttributeObject.bind.apply(AttributeObject, __spreadArrays([void 0], args)))();
    },
};
exports.default = Attributes;
