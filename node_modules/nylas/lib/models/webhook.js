"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var management_model_1 = __importDefault(require("./management-model"));
var attributes_1 = __importDefault(require("./attributes"));
var Webhook = /** @class */ (function (_super) {
    __extends(Webhook, _super);
    function Webhook() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Webhook.prototype.pathPrefix = function () {
        return "/a/" + this.clientId;
    };
    Webhook.prototype.saveRequestBody = function () {
        var json = {};
        // We can only update the state of an existing webhook
        if (this.id) {
            json['state'] = this.state;
        }
        else {
            json['callback_url'] = this.callbackUrl;
            json['state'] = this.state ? this.state : 'active';
            json['triggers'] = Webhook.attributes.triggers.toJSON(this.triggers);
        }
        return json;
    };
    Webhook.prototype.save = function (params, callback) {
        if (params === void 0) { params = {}; }
        return this._save(params, callback);
    };
    return Webhook;
}(management_model_1.default));
exports.default = Webhook;
Webhook.collectionName = 'webhooks';
Webhook.attributes = {
    id: attributes_1.default.String({
        modelKey: 'id',
    }),
    applicationId: attributes_1.default.String({
        modelKey: 'applicationId',
        jsonKey: 'application_id',
    }),
    callbackUrl: attributes_1.default.String({
        modelKey: 'callbackUrl',
        jsonKey: 'callback_url',
    }),
    state: attributes_1.default.String({
        modelKey: 'state',
    }),
    triggers: attributes_1.default.StringList({
        modelKey: 'triggers',
    }),
    version: attributes_1.default.String({
        modelKey: 'version',
    }),
};
