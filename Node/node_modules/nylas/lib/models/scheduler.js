"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchedulerAvailableCalendars = void 0;
var restful_model_1 = __importDefault(require("./restful-model"));
var attributes_1 = __importDefault(require("./attributes"));
var calendar_1 = __importDefault(require("./calendar"));
var SchedulerAvailableCalendars = /** @class */ (function (_super) {
    __extends(SchedulerAvailableCalendars, _super);
    function SchedulerAvailableCalendars() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return SchedulerAvailableCalendars;
}(restful_model_1.default));
exports.SchedulerAvailableCalendars = SchedulerAvailableCalendars;
SchedulerAvailableCalendars.collectionName = 'scheduler_available_calendars';
SchedulerAvailableCalendars.attributes = {
    calendars: attributes_1.default.Collection({
        modelKey: 'calendars',
        itemClass: calendar_1.default,
    }),
    email: attributes_1.default.String({
        modelKey: 'email',
    }),
    id: attributes_1.default.String({
        modelKey: 'id',
    }),
    name: attributes_1.default.String({
        modelKey: 'name',
    }),
};
var Scheduler = /** @class */ (function (_super) {
    __extends(Scheduler, _super);
    function Scheduler(connection, json) {
        var _this = _super.call(this, connection, json) || this;
        _this.baseUrl = 'https://api.schedule.nylas.com';
        return _this;
    }
    Scheduler.prototype.save = function (params, callback) {
        if (params === void 0) { params = {}; }
        return this._save(params, callback);
    };
    Scheduler.prototype.getAvailableCalendars = function () {
        var _this = this;
        if (!this.id) {
            throw new Error('Cannot get calendars for a page without an ID.');
        }
        return this.connection
            .request({
            method: 'GET',
            path: "/manage/pages/" + this.id + "/calendars",
            headers: {
                'Content-Type': 'application/json',
            },
            baseUrl: this.baseUrl,
        })
            .then(function (json) {
            var calendars = json.map(function (cal) {
                return new SchedulerAvailableCalendars(_this.connection, cal);
            });
            return Promise.resolve(calendars);
        });
    };
    Scheduler.prototype.uploadImage = function (contentType, objectName) {
        if (!this.id) {
            throw new Error('Cannot upload an image to a page without an ID.');
        }
        return this.connection.request({
            method: 'PUT',
            path: "/manage/pages/" + this.id + "/upload-image",
            headers: {
                'Content-Type': 'application/json',
            },
            body: {
                contentType: contentType,
                objectName: objectName,
            },
            baseUrl: this.baseUrl,
        });
    };
    return Scheduler;
}(restful_model_1.default));
exports.default = Scheduler;
Scheduler.collectionName = 'manage/pages';
Scheduler.attributes = __assign(__assign({}, restful_model_1.default.attributes), { accessTokens: attributes_1.default.StringList({
        modelKey: 'accessTokens',
        jsonKey: 'access_tokens',
    }), appClientId: attributes_1.default.String({
        modelKey: 'appClientId',
        jsonKey: 'app_client_id',
        readOnly: true,
    }), appOrganizationId: attributes_1.default.Number({
        modelKey: 'appOrganizationId',
        jsonKey: 'app_organization_id',
        readOnly: true,
    }), config: attributes_1.default.Object({
        modelKey: 'config',
    }), editToken: attributes_1.default.String({
        modelKey: 'editToken',
        jsonKey: 'edit_token',
        readOnly: true,
    }), name: attributes_1.default.String({
        modelKey: 'name',
    }), slug: attributes_1.default.String({
        modelKey: 'slug',
    }), createdAt: attributes_1.default.Date({
        modelKey: 'createdAt',
        jsonKey: 'created_at',
        readOnly: true,
    }), modifiedAt: attributes_1.default.Date({
        modelKey: 'modifiedAt',
        jsonKey: 'modified_at',
        readOnly: true,
    }) });
