import RestfulModel, { SaveCallback } from './restful-model';
import NylasConnection from '../nylas-connection';
import Calendar from './calendar';
export declare type SchedulerUploadImageResponse = {
    filename: string;
    originalFilename: string;
    publicUrl: string;
    signedUrl: string;
};
export declare class SchedulerAvailableCalendars extends RestfulModel {
    calendars?: Calendar[];
    email?: string;
    id?: string;
    name?: string;
}
export default class Scheduler extends RestfulModel {
    accessTokens?: string[];
    appClientId?: string;
    appOrganizationId?: number;
    config?: {
        appearance?: {
            color?: string;
            company_name?: string;
            logo?: string;
            privacy_policy_redirect?: string;
            show_autoschedule?: boolean;
            show_nylas_branding?: boolean;
            show_timezone_options?: boolean;
            submit_text?: string;
            thank_you_redirect?: string;
            thank_you_text?: string;
            thank_you_text_secondary?: string;
        };
        booking?: {
            additional_fields: Array<{
                dropdown_options?: string[];
                label?: string;
                multi_select_options?: string[];
                name?: string;
                order?: number;
                pattern?: string;
                required?: boolean;
                type?: string;
            }>;
            available_days_in_future: number;
            calendar_invite_to_guests: boolean;
            cancellation_policy: string;
            confirmation_emails_to_guests: boolean;
            confirmation_emails_to_host: boolean;
            confirmation_method: string;
            min_booking_notice: number;
            min_buffer: number;
            min_cancellation_notice: number;
            name_field_hidden: boolean;
            opening_hours: Array<{
                account_id?: string;
                days?: string[];
                end?: string;
                start?: string;
            }>;
            scheduling_method: string;
        };
        calendar_ids?: {
            [accountId: string]: {
                availability?: string[];
                booking?: string;
            };
        };
        event?: {
            duration?: number;
            location?: string;
            title?: string;
        };
        expire_after?: {
            date?: Date;
            uses?: number;
        };
        locale?: string;
        locale_for_guests?: string;
        reminders?: Array<{
            delivery_method?: string;
            delivery_recipient?: string;
            email_subject?: string;
            time_before_event?: number;
            webhook_url?: string;
        }>;
        timezone?: string;
    };
    editToken?: string;
    name?: string;
    slug?: string;
    createdAt?: Date;
    modifiedAt?: Date;
    constructor(connection: NylasConnection, json?: Record<string, any>);
    save(params?: {} | SaveCallback, callback?: SaveCallback): Promise<this>;
    getAvailableCalendars(): Promise<SchedulerAvailableCalendars[]>;
    uploadImage(contentType: string, objectName: string): Promise<SchedulerUploadImageResponse>;
}
