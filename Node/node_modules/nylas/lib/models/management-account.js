"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var management_model_1 = __importDefault(require("./management-model"));
var attributes_1 = __importDefault(require("./attributes"));
var ManagementAccount = /** @class */ (function (_super) {
    __extends(ManagementAccount, _super);
    function ManagementAccount() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ManagementAccount.prototype.upgrade = function () {
        return this.connection
            .request({
            method: 'POST',
            path: "/a/" + this.clientId + "/" + this.constructor.collectionName + "/" + this.id + "/upgrade",
        })
            .catch(function (err) { return Promise.reject(err); });
    };
    ManagementAccount.prototype.downgrade = function () {
        return this.connection
            .request({
            method: 'POST',
            path: "/a/" + this.clientId + "/" + this.constructor.collectionName + "/" + this.id + "/downgrade",
        })
            .catch(function (err) { return Promise.reject(err); });
    };
    ManagementAccount.prototype.revokeAll = function (keepAccessToken) {
        return this.connection
            .request({
            method: 'POST',
            path: "/a/" + this.clientId + "/" + this.constructor.collectionName + "/" + this.id + "/revoke-all",
            body: { keep_access_token: keepAccessToken },
        })
            .catch(function (err) { return Promise.reject(err); });
    };
    ManagementAccount.prototype.ipAddresses = function () {
        return this.connection
            .request({
            method: 'GET',
            path: "/a/" + this.clientId + "/ip_addresses",
        })
            .catch(function (err) { return Promise.reject(err); });
    };
    ManagementAccount.prototype.tokenInfo = function (accessToken) {
        return this.connection
            .request({
            method: 'POST',
            path: "/a/" + this.clientId + "/" + this.constructor.collectionName + "/" + this.id + "/token-info",
            body: {
                access_token: accessToken,
            },
        })
            .catch(function (err) { return Promise.reject(err); });
    };
    ManagementAccount.prototype.save = function (params, callback) {
        if (params === void 0) { params = {}; }
        return this._save(params, callback);
    };
    ManagementAccount.prototype.saveRequestBody = function () {
        return {
            metadata: this.metadata,
        };
    };
    ManagementAccount.prototype.saveEndpoint = function () {
        return "/a/" + this.connection.clientId + "/accounts";
    };
    return ManagementAccount;
}(management_model_1.default));
exports.default = ManagementAccount;
ManagementAccount.collectionName = 'accounts';
ManagementAccount.attributes = __assign(__assign({}, management_model_1.default.attributes), { billingState: attributes_1.default.String({
        modelKey: 'billingState',
        jsonKey: 'billing_state',
    }), emailAddress: attributes_1.default.String({
        modelKey: 'emailAddress',
        jsonKey: 'email',
    }), namespaceId: attributes_1.default.String({
        modelKey: 'namespaceId',
        jsonKey: 'namespace_id',
    }), provider: attributes_1.default.String({
        modelKey: 'provider',
    }), syncState: attributes_1.default.String({
        modelKey: 'syncState',
        jsonKey: 'sync_state',
    }), trial: attributes_1.default.Boolean({
        modelKey: 'trial',
    }), metadata: attributes_1.default.Object({
        modelKey: 'metadata',
    }) });
