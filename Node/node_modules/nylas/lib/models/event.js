"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var restful_model_1 = __importDefault(require("./restful-model"));
var attributes_1 = __importDefault(require("./attributes"));
var event_participant_1 = __importDefault(require("./event-participant"));
var event_conferencing_1 = require("./event-conferencing");
var event_notification_1 = require("./event-notification");
var Event = /** @class */ (function (_super) {
    __extends(Event, _super);
    function Event() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Event.prototype, "start", {
        get: function () {
            var _a, _b, _c, _d;
            var start = ((_a = this.when) === null || _a === void 0 ? void 0 : _a.start_time) || ((_b = this.when) === null || _b === void 0 ? void 0 : _b.start_date) || ((_c = this.when) === null || _c === void 0 ? void 0 : _c.time) || ((_d = this.when) === null || _d === void 0 ? void 0 : _d.date);
            return start;
        },
        set: function (val) {
            if (!this.when) {
                this.when = {};
            }
            if (typeof val === 'number') {
                if (val === this.when.end_time) {
                    this.when = { time: val };
                }
                else {
                    delete this.when.time;
                    delete this.when.start_date;
                    delete this.when.date;
                    this.when.start_time = val;
                }
            }
            if (typeof val === 'string') {
                if (val === this.when.end_date) {
                    this.when = { date: val };
                }
                else {
                    delete this.when.date;
                    delete this.when.start_time;
                    delete this.when.time;
                    this.when.start_date = val;
                }
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Event.prototype, "end", {
        get: function () {
            var _a, _b, _c, _d;
            var end = ((_a = this.when) === null || _a === void 0 ? void 0 : _a.end_time) || ((_b = this.when) === null || _b === void 0 ? void 0 : _b.end_date) || ((_c = this.when) === null || _c === void 0 ? void 0 : _c.time) || ((_d = this.when) === null || _d === void 0 ? void 0 : _d.date);
            return end;
        },
        set: function (val) {
            if (!this.when) {
                this.when = {};
            }
            if (typeof val === 'number') {
                if (val === this.when.start_time) {
                    this.when = { time: val };
                }
                else {
                    delete this.when.time;
                    delete this.when.end_date;
                    delete this.when.date;
                    this.when.end_time = val;
                }
            }
            if (typeof val === 'string') {
                if (val === this.when.start_date) {
                    this.when = { date: val };
                }
                else {
                    delete this.when.date;
                    delete this.when.time;
                    delete this.when.end_time;
                    this.when.end_date = val;
                }
            }
        },
        enumerable: false,
        configurable: true
    });
    Event.prototype.deleteRequestQueryString = function (params) {
        if (params === void 0) { params = {}; }
        var qs = {};
        if (params.hasOwnProperty('notify_participants')) {
            qs.notify_participants = params.notify_participants;
        }
        return qs;
    };
    Event.prototype.save = function (params, callback) {
        if (params === void 0) { params = {}; }
        if (this.conferencing &&
            this.conferencing.details &&
            this.conferencing.autocreate) {
            return Promise.reject(new Error("Cannot set both 'details' and 'autocreate' in conferencing object."));
        }
        return this._save(params, callback);
    };
    Event.prototype.saveRequestBody = function () {
        var json = _super.prototype.saveRequestBody.call(this);
        if (json.when && json.when.object) {
            delete json.when.object;
        }
        if (!this.notifications) {
            delete json.notifications;
        }
        return json;
    };
    Event.prototype.rsvp = function (status, comment, callback) {
        var _this = this;
        return this.connection
            .request({
            method: 'POST',
            body: { event_id: this.id, status: status, comment: comment },
            path: '/send-rsvp',
        })
            .then(function (json) {
            _this.fromJSON(json);
            if (callback) {
                callback(null, _this);
            }
            return Promise.resolve(_this);
        })
            .catch(function (err) {
            if (callback) {
                callback(err);
            }
            return Promise.reject(err);
        });
    };
    return Event;
}(restful_model_1.default));
exports.default = Event;
Event.collectionName = 'events';
Event.attributes = __assign(__assign({}, restful_model_1.default.attributes), { calendarId: attributes_1.default.String({
        modelKey: 'calendarId',
        jsonKey: 'calendar_id',
    }), iCalUID: attributes_1.default.String({
        modelKey: 'iCalUID',
        jsonKey: 'ical_uid',
        readOnly: true,
    }), messageId: attributes_1.default.String({
        modelKey: 'messageId',
        jsonKey: 'message_id',
        readOnly: true,
    }), title: attributes_1.default.String({
        modelKey: 'title',
    }), description: attributes_1.default.String({
        modelKey: 'description',
    }), owner: attributes_1.default.String({
        modelKey: 'owner',
        readOnly: true,
    }), participants: attributes_1.default.Collection({
        modelKey: 'participants',
        itemClass: event_participant_1.default,
    }), readOnly: attributes_1.default.Boolean({
        modelKey: 'readOnly',
        jsonKey: 'read_only',
    }), location: attributes_1.default.String({
        modelKey: 'location',
    }), when: attributes_1.default.Object({
        modelKey: 'when',
    }), busy: attributes_1.default.Boolean({
        modelKey: 'busy',
    }), status: attributes_1.default.String({
        modelKey: 'status',
        readOnly: true,
    }), recurrence: attributes_1.default.Object({
        modelKey: 'recurrence',
    }), masterEventId: attributes_1.default.String({
        modelKey: 'masterEventId',
        jsonKey: 'master_event_id',
        readOnly: true,
    }), originalStartTime: attributes_1.default.DateTime({
        modelKey: 'originalStartTime',
        jsonKey: 'original_start_time',
        readOnly: true,
    }), conferencing: attributes_1.default.Object({
        modelKey: 'conferencing',
        itemClass: event_conferencing_1.EventConferencing,
    }), notifications: attributes_1.default.Collection({
        modelKey: 'notifications',
        itemClass: event_notification_1.EventNotification,
    }), metadata: attributes_1.default.Object({
        modelKey: 'metadata',
    }), jobStatusId: attributes_1.default.String({
        modelKey: 'jobStatusId',
        jsonKey: 'job_status_id',
        readOnly: true,
    }) });
