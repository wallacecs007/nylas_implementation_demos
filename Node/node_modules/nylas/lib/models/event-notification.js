"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventNotification = void 0;
var restful_model_1 = __importDefault(require("./restful-model"));
var attributes_1 = __importDefault(require("./attributes"));
var EventNotification = /** @class */ (function (_super) {
    __extends(EventNotification, _super);
    function EventNotification() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    EventNotification.prototype.toJSON = function () {
        return {
            type: this.type,
            minutes_before_event: this.minutesBeforeEvent,
            url: this.url,
            payload: this.payload,
            subject: this.subject,
            body: this.body,
            message: this.message,
        };
    };
    return EventNotification;
}(restful_model_1.default));
exports.EventNotification = EventNotification;
EventNotification.collectionName = 'event_notification';
EventNotification.attributes = {
    type: attributes_1.default.String({
        modelKey: 'type',
    }),
    minutesBeforeEvent: attributes_1.default.Number({
        modelKey: 'minutesBeforeEvent',
        jsonKey: 'minutes_before_event',
    }),
    url: attributes_1.default.String({
        modelKey: 'url',
    }),
    payload: attributes_1.default.String({
        modelKey: 'payload',
    }),
    subject: attributes_1.default.String({
        modelKey: 'subject',
    }),
    body: attributes_1.default.String({
        modelKey: 'body',
    }),
    message: attributes_1.default.String({
        modelKey: 'message',
    }),
};
